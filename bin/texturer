#!/usr/bin/env node
var fs          = require("fs"),
	packageJSON = require('../package.json'),
	Texturer    = require("../dist/texturer.js").Texturer;

function main (configFile) {
	var texturer = new Texturer(),
		configJSONString;

	try {
		configJSONString = fs.readFileSync(configFile, "utf8");
	} catch (e) {
		throw new Error("CFG: Can't read config file \"" + configFile + "\nError: " + e);
	}

	["version", "author", "homepage", "engines", "bugs"].forEach(function (key) {
		if (typeof packageJSON[key] === 'object') {
			Object.keys(packageJSON[key]).forEach(function (k) {
				console.log(key + "." + k + ": \t" + packageJSON[key][k]);
			});
		} else {
			console.log(key + ": \t" + packageJSON[key]);
		}
	});
	var cwd = "current folder: " + process.cwd();
	console.log(cwd);
	console.log(new Array(cwd.length + 1).join("-"));


	var config = null;
	try {
		// eval is used to allow comments inside json
		config = eval('(' + configJSONString + ')');
	} catch (e) {
		throw new Error("File: " + configFile + ", JSON parse error: \"" + e + "\n");
	}

	texturer.generate(config, function (error) {
		if (error) {
			throw error; //("\x1B[91m" + error + "\x1B[39m");
			process.exit(42);
		} else {
			process.exit(0);
		}
	}, null);
}

if (process.argv.length > 2) {
	process.argv.forEach(function (file, index) {
		if (index >= 2) {
			main(file);
		}
	});

} else {
	main("./config.json");
}
